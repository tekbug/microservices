import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.3.8' apply false
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.athena.v2'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    api 'org.springframework.boot:spring-boot-starter-validation'
    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-parameters")
    options.encoding = 'UTF-8'
    options.compilerArgs += [
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "Athena Library"
                description = "Shared library for Athena applications and dependencies"
                url = "https://github.com/tekbug/athena-build"
            }

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            repositories {
                mavenLocal()
            }
        }
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                'Built-With': "gradle-${project.gradle.gradleVersion}",
                'Build-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
        )
    }
}
